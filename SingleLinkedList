class Node:

    def __init__(self):
        self.data = None
        self.next = None

    def getData(self):
        return self.data

    def setData(self, data):
        self.data = data

    def getNext(self):
        return self.next

    def setNext(self, next):
        self.next = next

    def hasNext(self):
        self.next != None

    def listLength(self):
        current = self.head
        length = 0
        while current != None:
            length += 1
            current = current.getNext()
        return length

    def insertAtBeginning(self, data):
        newNode = Node()
        newNode.setData(data)
        if self.length == 0:
            self.head = newNode
        else:
            newNode.setNext(self.head)
            self.head = newNode

        self.length += 1

    def insertAtEnd(self, data):
        newNode = Node()
        newNode.setData(data)
        current = self.head

        while current.getNext() != None:
            current = current.getNext()

        current.setNext(newNode)
        self.length += 1

    def insertAtPos(self, pos, data):
        if pos < 0 or pos > self.length:
            raise IndexError
        else:
            if pos == 0:
                self.insertAtBeginning(data)
            else:
                if pos == self.length:
                    self.insertAtEnd(data)
                else:
                    newNode = Node()
                    newNode.setData(data)
                    count = 0
                    current = self.head
                    while count < pos - 1:
                        count += 1
                        current = current.getNext()
                    newNode.setNext(current.getNext())
                    current.setNext(newNode)
                    self.length += 1

    def deleteFromBeginning(self):
        if self.length == 0:
            print("The list is empty")
        else:
            self.head = self.head.getNext()
            self.length -= 1

    def deleteAtEnd(self):
        if self.length == 0:
            print("The list is empty")
        else:
            previous = self.head
            current = self.head
            while current.getNext() != None:
                previous = current
                current = current.getNext()

            previous.setNext(None)
            self.length -= 1

    def deleteWithNode(self, node):
        if self.length == 0:
            raise ValueError('List empty')
        else:
            current = self.head
            previous = None
            found = False

            while not found:
                if current == node:
                    found = True
                elif current == None:
                    raise ValueError('Node not in Linked List')
                else:
                    previous = current
                    current = current.getNext()

        if previous is None:
            self.head = current.getNext()
        else:
            previous.setNext(current.getNext())
        self.length += 1

    def deleteValue(self, value):
        current = self.head
        previous = self.head

        while current.getNext() != None or current.getData() != value:
            if current.getData() == value:
                previous.next = current.next
                self.length -= 1
                return
            else:
                previous = current
                current = current.getNext()

        print('The value provided is not present')

    def findListNode(self):
        listNode = []
        current = self.head
        while current.getNext() != None:
            listNode.append(current.getData())
            current = current.getNext()

        listNode.append(current.getData())
        return listNode

    def getNode(self, index):
        current = self.head
        count = 0
        while current:
            if count == index:
                return current
            else:
                count += 1
                current = current.getNext()
        print('The index provided is not present')

    def clear(self):
        self.head = None

def find(node: Node, value_node_need_search):
    if not Node:
        return None
    else:
        if node.data == value_node_need_search:
            return node.data
        else:
            return find(node.next, value_node_need_search)

a = Node()
a.data = 10
a.head = a
a.length = a.listLength()


a.insertAtEnd(1)
a.insertAtEnd(12)
a.insertAtEnd(13)
a.insertAtEnd(14)
a.insertAtPos(1, 99)
a.deleteFromBeginning()
a.deleteAtEnd()
a.deleteValue(1)

print(a.findListNode())

b = a.getNode(1)
a.deleteWithNode(b)

print(a.findListNode())

